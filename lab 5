{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP0fQXAl2Bdvit0rQl9LnVm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ayesha3910/Artificial-Intelligence/blob/main/lab%205\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "8Kl35Efg7Ok2"
      },
      "outputs": [],
      "source": [
        "def read_graph(filename): \"\"\"Read in edges of a graph represented one per line, using the format: srcStateName destStateName\"\"\" #print(\"Loading graph: \" + filename) edges = {} inFile = open(filename) for line in inFile: roadInfo = line.split() # Skip blank lines, read in contents from non-empty lines. if (len(roadInfo) > 0): srcCity = roadInfo[0] destCity = roadInfo[1] if srcCity in edges: edges[srcCity] = edges[srcCity] + [destCity] else: edges[srcCity] = [destCity] if destCity in edges: edges[destCity] = edges[destCity] + [srcCity] else: edges[destCity] = [srcCity] #print(\" done.\\n\") return edges ###################################### # Add functions for search, output # etc. here ###################################### \"\"\" This is Frontier class to represent Frontier Data structure it has 2 attributes stack :- A Queue with FIFO property lookup :- A set \"\"\" class Frontier: __slot__ = \"stack\", \"lookup\" \"\"\" Contructor of Class \"\"\" def __init__(self): self.stack = [] self.lookup = set() \"\"\" This function returns top element of stack \"\"\" def top(self): return self.stack[len(self.stack) - 1] \"\"\" This function checks if stack is empty or not return True if stack is empty False if stack is not empty \"\"\" def isEmpty(self): return self.stack == [] \"\"\" This function push element at top of stack and also in look up table \"\"\" def push(self, node): self.stack.append(node) self.lookup.add(node.name) \"\"\" This function removes first element from stack and return it also removes element from look up set \"\"\" def pop(self): if len(self.stack) == 0: return None else: self.lookup.remove(self.top().name) return self.stack.pop() \"\"\" This functions checks in lookup table if passed element is present in lookup table or not \"\"\" def present(self, name): return self.lookup.__contains__(name) \"\"\" This class represents search node for iterative deepenig it has 3 attributes parent which represent parent link to parent name Name of City level represents cost to reach at search node \"\"\" class node: __slot__ = \"parent\", \"name\", \"level\" def __init__(self, name, parent, level): self.name = name self.parent = parent self.level = level \"\"\" This function performs Iterative Deepening DFS on graph until goal state is found or graph is exhausted \"\"\" def iterative_DFS(edges, start, end): limit = 0 flag = 1 visited={} while (flag): ##print ('limit =' + str(limit)) test, max,list,solution,visited = depth_limited_dfs(edges, start, end, limit,visited) print('--------------- States Visited at Depth '+str(limit)+' ---------------') for item in list: print (2*item.level*' ',item.name) if test is 'Success': print('-- Solution for: ' + start + ' to ' + end + '-------------------') op=solution[::-1] print (op) return op break if(test == 'Fail' and max < limit): solution.append('Failed Search') return solution break limit = limit + 1 \"\"\" This function performs Depth Limited DFS on given Graph upto given limit \"\"\" def depth_limited_dfs(edges, start, end, limit,visited): front = Frontier() front.push(node(start, None, 0)) max_level = 0 level_list = [] solution=[] while front.isEmpty() == False: temp = front.pop() if (temp.level > limit): continue if (temp.level > max_level): max_level = temp.level visited[temp.name] = temp; level_list.append(temp) if temp.name == end: parent = temp.name while parent is not None: solution.append(parent) parent = visited[parent].parent return 'Success', max_level,level_list,solution,visited else: for iter in edges[temp.name]: if iter not in visited and not front.present(iter): front.push(node(iter, temp.name, temp.level + 1)) elif iter in visited and visited[iter].level==(temp.level+1): front.push(node(iter, temp.name, temp.level + 1)) else: continue return 'Fail', max_level,level_list,solution,visited # TBD ######################### # Main program ######################### def main(): if len(sys.argv) != 4: print('Usage: python SearchGraph.py graphFilename startNode goalNode') return else: # Create a dictionary (i.e. associative array, implemented as a hash # table) for edges in the map file, and define start and end states for # the search. Each dictionary entry key is a string for a location, # associated with a list of strings for the adjacent states (cities) in # the state space. edges = {} edges = read_graph(sys.argv[1]) start = sys.argv[2] goal = sys.argv[3] # Comment out the following lines to hide the graph description. #print(\"-- Adjacent Cities (Transition/Successor Fn) ------------------------\") #for location in edges.keys(): # s = ' ' + location + ':\\n ' # s = s + str(edges[location]) # print(s) if not start in edges.keys(): print(\"Start location is not in the graph.\") else: s=iterative_DFS(edges, start, goal) print ('Function Returned List containing ',s) #print('') #print('--------------- States Visited ----------------') #print('TBD - print search tree if solution is found, and each time max depth is reached.') #print('') #print('-- Solution for: ' + start + ' to ' + goal + '-------------------') #print('TBD - provide solution path or indicate failure.') #print('') # Execute the main program. main()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import sys # SearchGraph.py # # Implementation of iterative deepening search for use in finding optimal routes # between locations in a graph. In the graph to be searched, nodes have names # (e.g. city names for a map). # def read_graph(filename): \"\"\"Read in edges of a graph represented one per line, using the format: srcStateName destStateName\"\"\" #print(\"Loading graph: \" + filename) edges = {} inFile = open(filename) for line in inFile: roadInfo = line.split() # Skip blank lines, read in contents from non-empty lines. if (len(roadInfo) > 0): srcCity = roadInfo[0] destCity = roadInfo[1] if srcCity in edges: edges[srcCity] = edges[srcCity] + [destCity] else: edges[srcCity] = [destCity] if destCity in edges: edges[destCity] = edges[destCity] + [srcCity] else: edges[destCity] = [srcCity] #print(\" done.\\n\") return edges ###################################### # Add functions for search, output # etc. here ###################################### \"\"\" This is Frontier class to represent Frontier Data structure it has 2 attributes stack :- A Queue with FIFO property lookup :- A set \"\"\" class Frontier: __slot__ = \"stack\", \"lookup\" \"\"\" Contructor of Class \"\"\" def __init__(self): self.stack = [] self.lookup = set() \"\"\" This function returns top element of stack \"\"\" def top(self): return self.stack[len(self.stack) - 1] \"\"\" This function checks if stack is empty or not return True if stack is empty False if stack is not empty \"\"\" def isEmpty(self): return self.stack == [] \"\"\" This function push element at top of stack and also in look up table \"\"\" def push(self, node): self.stack.append(node) self.lookup.add(node.name) \"\"\" This function removes first element from stack and return it also removes element from look up set \"\"\" def pop(self): if len(self.stack) == 0: return None else: self.lookup.remove(self.top().name) return self.stack.pop() \"\"\" This functions checks in lookup table if passed element is present in lookup table or not \"\"\" def present(self, name): return self.lookup.__contains__(name) \"\"\" This class represents search node for iterative deepenig it has 3 attributes parent which represent parent link to parent name Name of City level represents cost to reach at search node \"\"\" class node: __slot__ = \"parent\", \"name\", \"level\" def __init__(self, name, parent, level): self.name = name self.parent = parent self.level = level \"\"\" This function performs Iterative Deepening DFS on graph until goal state is found or graph is exhausted \"\"\" def iterative_DFS(edges, start, end): limit = 0 flag = 1 visited={} while (flag): ##print ('limit =' + str(limit)) test, max,list,solution,visited = depth_limited_dfs(edges, start, end, limit,visited) print('--------------- States Visited at Depth '+str(limit)+' ---------------') for item in list: print (2*item.level*' ',item.name) if test is 'Success': print('-- Solution for: ' + start + ' to ' + end + '-------------------') op=solution[::-1] print (op) return op break if(test == 'Fail' and max < limit): solution.append('Failed Search') return solution break limit = limit + 1 \"\"\" This function performs Depth Limited DFS on given Graph upto given limit \"\"\" def depth_limited_dfs(edges, start, end, limit,visited): front = Frontier() front.push(node(start, None, 0)) max_level = 0 level_list = [] solution=[] while front.isEmpty() == False: temp = front.pop() if (temp.level > limit): continue if (temp.level > max_level): max_level = temp.level visited[temp.name] = temp; level_list.append(temp) if temp.name == end: parent = temp.name while parent is not None: solution.append(parent) parent = visited[parent].parent return 'Success', max_level,level_list,solution,visited else: for iter in edges[temp.name]: if iter not in visited and not front.present(iter): front.push(node(iter, temp.name, temp.level + 1)) elif iter in visited and visited[iter].level==(temp.level+1): front.push(node(iter, temp.name, temp.level + 1)) else: continue return 'Fail', max_level,level_list,solution,visited # TBD ######################### # Main program ######################### def main(): if len(sys.argv) != 4: print('Usage: python SearchGraph.py graphFilename startNode goalNode') return else: # Create a dictionary (i.e. associative array, implemented as a hash # table) for edges in the map file, and define start and end states for # the search. Each dictionary entry key is a string for a location, # associated with a list of strings for the adjacent states (cities) in # the state space. edges = {} edges = read_graph(sys.argv[1]) start = sys.argv[2] goal = sys.argv[3] # Comment out the following lines to hide the graph description. #print(\"-- Adjacent Cities (Transition/Successor Fn) ------------------------\") #for location in edges.keys(): # s = ' ' + location + ':\\n ' # s = s + str(edges[location]) # print(s) if not start in edges.keys(): print(\"Start location is not in the graph.\") else: s=iterative_DFS(edges, start, goal) print ('Function Returned List containing ',s) #print('') #print('--------------- States Visited ----------------') #print('TBD - print search tree if solution is found, and each time max depth is reached.') #print('') #print('-- Solution for: ' + start + ' to ' + goal + '-------------------') #print('TBD - provide solution path or indicate failure.') #print('') # Execute the main program. main()"
      ],
      "metadata": {
        "id": "NRHhe2v07kTc"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Below lists detail all eight possible movements from a cell # (top, right, bottom, left, and four diagonal moves) row = [-1, -1, -1, 0, 1, 0, 1, 1] col = [-1, 1, 0, -1, -1, 1, 0, 1] # Function to check if it is safe to go to cell (x, y) from the current cell. # The function returns false if (x, y) is not valid matrix coordinates # or cell (x, y) is already processed. def isSafe(x, y, processed): return (0 <= x < len(processed)) and (0 <= y < len(processed[0]))\\ and not processed[x][y] # A recursive function to generate all possible words in a boggle def searchBoggle(board, words, result, processed, i, j, path=''): # mark the current node as processed processed[i][j] = True # update the path with the current character and insert it into the set path += board[i][j] # check whether the path is present in the input set if path in words: result.add(path) # check for all eight possible movements from the current cell for k in range(len(row)): # skip if a cell is invalid, or it is already processed if isSafe(i + row[k], j + col[k], processed): searchBoggle(board, words, result, processed, i + row[k], j + col[k], path) # backtrack: mark the current node as unprocessed processed[i][j] = False def searchInBoggle(board, words): # construct a set to store valid words constructed from the boggle result = set() # base case if not board or not len(board): return # `M × N` board (M, N) = (len(board), len(board[0])) # construct a boolean matrix to store whether a cell is processed or not processed = [[False for x in range(N)] for y in range(M)] # generate all possible words in a boggle for i in range(M): for j in range(N): # consider each character as a starting point and run DFS searchBoggle(board, words, result, processed, i, j) return result if __name__ == '__main__': board = [ ['M', 'S', 'E','F'], ['R', 'A', 'T','D'], ['L', 'O', 'N','E'], ['K','A','F','B'] ] words = ['STAR', 'NOTE', 'SAND', 'STONE'] validWords = searchInBoggle(board, words) print(validWords)"
      ],
      "metadata": {
        "id": "xZ8BECfE7oGx"
      },
      "execution_count": 2,
      "outputs": []
    }
  ]
}